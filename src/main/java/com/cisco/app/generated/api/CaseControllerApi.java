/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cisco.app.generated.api;

import com.cisco.app.generated.model.Error;
import com.cisco.app.generated.model.ModelCase;
import com.cisco.app.generated.model.Note;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "CaseController", description = "the CaseController API")
public interface CaseControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cases/{caseId}/addNote : Add note
     * Add note
     *
     * @param caseId  (required)
     * @param note Note body (required)
     * @return case created (status code 200)
     *         or others (status code 500)
     */
    @Operation(
        operationId = "addNote",
        summary = "Add note",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "case created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Note.class))),
            @ApiResponse(responseCode = "500", description = "others", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cases/{caseId}/addNote",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Note> addNote(
        @Parameter(name = "caseId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("caseId") Long caseId,
        @Parameter(name = "Note", description = "Note body", required = true, schema = @Schema(description = "")) @Valid @RequestBody Note note
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"details\", \"id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /cases/create : Create case
     * Create case
     *
     * @param modelCase Case body (required)
     * @return case created (status code 200)
     *         or others (status code 500)
     */
    @Operation(
        operationId = "createCase",
        summary = "Create case",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "case created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ModelCase.class))),
            @ApiResponse(responseCode = "500", description = "others", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cases/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ModelCase> createCase(
        @Parameter(name = "ModelCase", description = "Case body", required = true, schema = @Schema(description = "")) @Valid @RequestBody ModelCase modelCase
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"severity\" : 6, \"notes\" : [ { \"details\" : \"details\", \"id\" : 5 }, { \"details\" : \"details\", \"id\" : 5 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : { \"firstname\" : \"firstname\", \"id\" : 1, \"email\" : \"email\", \"lastname\" : \"lastname\" }, \"status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cases/{caseId} : Returns a case
     * Returns a case
     *
     * @param caseId  (required)
     * @return case found (status code 200)
     *         or not found (status code 404)
     */
    @Operation(
        operationId = "getCase",
        summary = "Returns a case",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "case found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ModelCase.class))),
            @ApiResponse(responseCode = "404", description = "not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/{caseId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ModelCase> getCase(
        @Parameter(name = "caseId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("caseId") Long caseId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"severity\" : 6, \"notes\" : [ { \"details\" : \"details\", \"id\" : 5 }, { \"details\" : \"details\", \"id\" : 5 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : { \"firstname\" : \"firstname\", \"id\" : 1, \"email\" : \"email\", \"lastname\" : \"lastname\" }, \"status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cases/status/{status} : Returns a list of cases
     * Returns a list of cases
     *
     * @param status  (required)
     * @return cases found (status code 200)
     *         or not found (status code 404)
     */
    @Operation(
        operationId = "getCasesWithStatus",
        summary = "Returns a list of cases",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "cases found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ModelCase.class))),
            @ApiResponse(responseCode = "404", description = "not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/status/{status}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ModelCase>> getCasesWithStatus(
        @Parameter(name = "status", description = "", required = true, schema = @Schema(description = "", allowableValues = { "OPEN", "CLOSED" })) @PathVariable("status") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"severity\" : 6, \"notes\" : [ { \"details\" : \"details\", \"id\" : 5 }, { \"details\" : \"details\", \"id\" : 5 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : { \"firstname\" : \"firstname\", \"id\" : 1, \"email\" : \"email\", \"lastname\" : \"lastname\" }, \"status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cases/user/{userId} : Returns a list of openedCases
     * Returns a list of openedCases
     *
     * @param userId  (required)
     * @return cases found (status code 200)
     *         or not found (status code 404)
     */
    @Operation(
        operationId = "getOpenCases",
        summary = "Returns a list of openedCases",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "cases found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ModelCase.class))),
            @ApiResponse(responseCode = "404", description = "not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ModelCase>> getOpenCases(
        @Parameter(name = "userId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("userId") Long userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"severity\" : 6, \"notes\" : [ { \"details\" : \"details\", \"id\" : 5 }, { \"details\" : \"details\", \"id\" : 5 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : { \"firstname\" : \"firstname\", \"id\" : 1, \"email\" : \"email\", \"lastname\" : \"lastname\" }, \"status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cases/user/{userId}/status/{status} : Returns a list of cases per user and status
     * Returns a list of cases per user and status
     *
     * @param userId  (required)
     * @param status  (required)
     * @return cases found (status code 200)
     *         or not found (status code 404)
     */
    @Operation(
        operationId = "getOpenCases2",
        summary = "Returns a list of cases per user and status",
        tags = { "case-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "cases found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ModelCase.class))),
            @ApiResponse(responseCode = "404", description = "not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/user/{userId}/status/{status}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ModelCase>> getOpenCases2(
        @Parameter(name = "userId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("userId") Long userId,
        @Parameter(name = "status", description = "", required = true, schema = @Schema(description = "", allowableValues = { "OPEN", "CLOSED" })) @PathVariable("status") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"severity\" : 6, \"notes\" : [ { \"details\" : \"details\", \"id\" : 5 }, { \"details\" : \"details\", \"id\" : 5 } ], \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : { \"firstname\" : \"firstname\", \"id\" : 1, \"email\" : \"email\", \"lastname\" : \"lastname\" }, \"status\" : \"OPEN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
